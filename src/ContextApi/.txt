import React, { useContext, useEffect, useState } from "react";
import {
  StyleSheet,
  Text,
  View,
  ImageBackground,
  StatusBar,
  Image,
  ScrollView,
  TouchableOpacity,
  Dimensions,
} from "react-native";
import { Appbar, RadioButton } from "react-native-paper";
import Icon from "react-native-vector-icons/MaterialIcons";
import BatteryIcon from "./BatteryIcon";
import BGImage from "./assets/background.png";
import Logo from "./assets/1.png";
import BT from "./assets/blues.png";
import { useNavigation } from "@react-navigation/native";
import { BleContext } from "./ContextApi/BleContext";

const { width, height } = Dimensions.get("window");

const Dashboard = () => {
  const [showLoginPopup, setShowLoginPopup] = useState(false);
  const navigation = useNavigation();
  const {
    bleData,
    handleChangeUnit,
    unit,
    handleZeroClick,
    selectedDevice,
    isConnected,
  } = useContext(BleContext);

  const handleLogin = () => {
    setShowLoginPopup(true);
    navigation.navigate("LoginPopup");
  };

  const handleBluetooth = () => {
    navigation.navigate("BluetoothScreen");
  };

  const formatWeight = (weight) => {
    return weight ? weight.toFixed(1) : "N/A";
  };

  const getBlockColor = (status) => {
    return status ? styles.greenBlock : styles.redBlock;
  };

  return (
    <View style={styles.container}>
      <StatusBar barStyle="light-content" />
      <ImageBackground source={BGImage} style={styles.backgroundImage}>
        <Appbar.Header style={styles.appBar}>
          <TouchableOpacity onPress={handleLogin} style={styles.menuIcon}>
            <Appbar.Action
              icon={() => <Icon name="menu" size={32} color="#fff" />}
            />
          </TouchableOpacity>
          <Appbar.Content style={styles.logoContainer} />
          <Image source={Logo} style={styles.logo} />
        </Appbar.Header>
        <ScrollView style={styles.scroll}>
          <View style={styles.content}>
            {/* Front Weight Block */}
            <View style={styles.centerCard}>
              <Text style={styles.cardTitle}>Front Weight</Text>
              <View style={styles.card}>
                <Text style={styles.cardValue}>
                  {formatWeight(bleData.frontWeight)}
                </Text>
              </View>
            </View>
            {/* LF And RF Block */}
            <View style={styles.row}>
              <View style={styles.column}>
                <BatteryIcon
                  size={30}
                  batteryPercentage={bleData.lfBattery ?? "0"}
                />
                <Text style={styles.columnTitle}> LF</Text>
                <View
                  style={[styles.smallCard, getBlockColor(bleData.lfColor)]}
                >
                  <Text style={styles.columnValue}>
                    {formatWeight(bleData.lfWeight)}
                  </Text>
                  <Text style={styles.columnPercentage}>
                    {bleData.lfWeightP ?? "N/A"}%
                  </Text>
                </View>
              </View>
              <View style={styles.column}>
                <BatteryIcon
                  size={30}
                  batteryPercentage={bleData.rfBattery ?? "N/A"}
                />
                <Text style={styles.columnTitle}>RF</Text>
                <View
                  style={[styles.smallCard, getBlockColor(bleData.rfColor)]}
                >
                  <Text style={styles.columnValue}>
                    {formatWeight(bleData.rfWeight)}
                  </Text>
                  <Text style={styles.columnPercentage}>
                    {bleData.rfWeightP ?? "N/A"}%
                  </Text>
                </View>
              </View>
            </View>
            {/* Cross Weight Block */}
            <View style={styles.centerCard1}>
              <Text style={styles.cardTitle}>Cross Weight</Text>
              <View style={styles.card}>
                <Text style={styles.cardValue}>
                  {formatWeight(bleData.crossWeight)}
                </Text>
              </View>
            </View>
            {/* LR And RR Block */}
            <View style={styles.row}>
              <View style={styles.column}>
                <BatteryIcon
                  size={30}
                  batteryPercentage={bleData.lrBattery ?? "N/A"}
                />
                <Text style={styles.columnTitle}>LR</Text>
                <View
                  style={[styles.smallCard, getBlockColor(bleData.lrColor)]}
                >
                  <Text style={styles.columnValue}>
                    {formatWeight(bleData.lrWeight)}
                  </Text>
                  <Text style={styles.columnPercentage}>
                    {bleData.lrWeightP ?? "N/A"}%
                  </Text>
                </View>
              </View>
              <View style={styles.column}>
                <BatteryIcon
                  size={30}
                  batteryPercentage={bleData.rrBattery ?? "N/A"}
                />
                <Text style={styles.columnTitle}>RR</Text>
                <View
                  style={[styles.smallCard, getBlockColor(bleData.rrColor)]}
                >
                  <Text style={styles.columnValue}>
                    {formatWeight(bleData.rrWeight)}
                  </Text>
                  <Text style={styles.columnPercentage}>
                    {bleData.rrWeightP ?? "N/A"}%
                  </Text>
                </View>
              </View>
            </View>
            {/* Rear Weight Block */}
            <View style={styles.centerCard1}>
              <Text style={styles.cardTitle}>Rear Weight</Text>
              <View style={styles.card}>
                <Text style={styles.cardValue}>
                  {formatWeight(bleData.rearWeight)}
                </Text>
              </View>
            </View>
            {/* Total Weight Block and Radio Buttons */}
            <View style={styles.totalWeightContainer}>
              <View style={styles.centerCard3}>
                <Text style={styles.cardTitle}>Total Weight</Text>
                <View style={styles.card5}>
                  <Text style={styles.cardValue}>
                    {formatWeight(bleData.totalWeight)}
                  </Text>
                </View>
              </View>
              {/* Radio buttons for selecting unit */}
              <View style={styles.radioContainer}>
                <RadioButton.Group
                  onValueChange={(value) => handleChangeUnit(value)} // Call handleChangeUnit when value changes
                  value={unit}
                >
                  {/* Radio buttons for selecting unit */}
                  <View style={styles.radioOption}>
                    <RadioButton
                      value="kg"
                      color="#aaff00"
                      uncheckedColor="#F7FC03"
                    />
                    <Text style={styles.radioText}>Kg</Text>
                  </View>
                  <View style={styles.radioOption1}>
                    <RadioButton
                      value="lbs"
                      color="#aaff00"
                      uncheckedColor="#F7FC03"
                    />
                    <Text style={styles.radioText}>Lbs</Text>
                  </View>
                </RadioButton.Group>
              </View>
            </View>
            {/* Zero Block */}
            <TouchableOpacity style={styles.button} onPress={handleZeroClick}>
              <View style={styles.centerCard4}>
                <View style={styles.card1}>
                  <Text style={styles.cardValue1}>Zero</Text>
                </View>
              </View>
            </TouchableOpacity>
            {/* Connected text */}
            <View style={styles.connectedContainer}>
              <TouchableOpacity onPress={handleBluetooth}>
                <Image source={BT} style={styles.btImage} />
              </TouchableOpacity>
              <View style={{ flexDirection: "column" }}>
                <Text
                  style={
                    selectedDevice ? styles.connected : styles.disconnected
                  }
                >
                  {selectedDevice ? selectedDevice.name : "-"}
                </Text>
                <Text
                  style={
                    selectedDevice ? styles.connected : styles.disconnected
                  }
                >
                  {isConnected ? "Connected" : "Disconnected"}
                </Text>
              </View>
            </View>
          </View>
        </ScrollView>
      </ImageBackground>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  backgroundImage: {
    flex: 1,
    resizeMode: "cover",
  },
  appBar: {
    backgroundColor: "transparent",
    elevation: 0,
    justifyContent: "center",
    alignItems: "center",
    paddingVertical: 10,
  },
  logoContainer: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
  },
  logo: {
    width: width * 0.6,
    height: height * 0.1,
    position: "absolute",
    alignSelf: "center",
    top: 1,
    resizeMode: "contain",
  },
  content: {
    flex: 1,
    alignItems: "center",
    marginTop: 40,
  },
  centerCard: {
    alignItems: "center",
    marginBottom: 20,
  },
  cardTitle: {
    marginBottom: 1,
    fontSize: width * 0.04,
    fontWeight: "bold",
    color: "#F7FC03",
  },
  card: {
    backgroundColor: "#aaff00",
    padding: 10,
    borderRadius: 20,
    alignItems: "center",
    width: width * 0.3,
    justifyContent: "center",
  },
  cardValue: {
    fontSize: width * 0.04,
    color: "#000",
  },
  row: {
    flexDirection: "row",
    justifyContent: "space-around",
    width: "100%",
  },
  column: {
    flexDirection: "column",
    alignItems: "flex-start",
    justifyContent: "flex-start",
  },
  columnTitle: {
    marginBottom: 1,
    fontSize: width * 0.04,
    fontWeight: "bold",
    color: "#F7FC03",
  },
  smallCard: {
    padding: 5,
    borderRadius: 10,
    alignItems: "center",
    width: width * 0.32,
    height: height * 0.07,

    justifyContent: "center",
  },
  greenBlock: {
    backgroundColor: "#00ff00",
  },
  redBlock: {
    backgroundColor: "#ff0000",
  },
  columnValue: {
    fontSize: 19,
    fontWeight: "bold",
    color: "#000",
  },
  columnPercentage: {
    fontSize: width * 0.04,
    color: "#000",
  },
  centerCard1: {
    alignItems: "center",
    marginBottom: 20,
    marginTop: 10,
  },
  centerCard3: {
    alignItems: "center",
    marginBottom: 20,
    marginTop: 1,
    marginLeft: width * 0.23,
  },
  card5: {
    backgroundColor: "#aaff00",
    padding: 10,
    borderRadius: 20,
    alignItems: "center",
    width: width * 0.3,
    height: height * 0.05,
    justifyContent: "center",
  },
  totalWeightContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    marginBottom: 30,
    marginTop: 5,
  },
  radioContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  radioOption: {
    flexDirection: "row",
    alignItems: "center",
    marginLeft: 40,
  },
  radioOption1: {
    flexDirection: "row",
    alignItems: "center",
    marginLeft: 40,
  },
  radioText: {
    fontSize: 16,
    color: "#fff",
    marginRight: 2,
  },
  radioButtonWrapper: {
    marginLeft: 0,
  },
  centerCard4: {
    alignItems: "center",
    marginBottom: 1,
    marginTop: 2,
  },
  card1: {
    backgroundColor: "red",
    padding: 3,
    borderRadius: 8,
    width: width * 0.3,
    alignItems: "center",
    height: height * 0.05,
  },
  cardValue1: {
    fontSize: width * 0.06,
    color: "#000",
    textAlign: "center",
  },
  button: {
    alignItems: "center",
    justifyContent: "center",
    marginTop: 10,
  },
  connectedContainer: {
    flexDirection: "row",
    alignItems: "center",
    position: "relative",
    bottom: 0,
    right: 130,
    paddingVertical: 10,
    paddingHorizontal: 20,
    marginTop: 14,
  },
  btImage: {
    width: width * 0.1,
    height: height * 0.05,
    resizeMode: "contain",
    marginRight: 10,
    alignSelf: "center",
  },
  connected: {
    color: "#F7FC03",
    fontSize: 19,
    fontWeight: "bold",
    marginTop: 1,
  },
  disconnected: {
    color: "red",
    textAlign: "center",
    fontWeight: "bold",
    marginTop: 1,
  },
});

export default Dashboard;

















import React, { createContext, useEffect, useState } from "react";
import { Buffer } from "buffer";
import BleManager from "react-native-ble-manager";

const serviceid = "12345678-1234-1234-1234-123456789012";
const Zero = "9bad813d-370a-45e5-ac4d-bb4c2b65379f";
const CHUNK_SIZE = 20;

export const BleContext = createContext();

export const BleProvider = ({ children }) => {
  const [bleData, setBleData] = useState({
    frontWeight: "",
    lfWeight: "",
    rfWeight: "",
    rfWeightP: "",
    rfBattery: "",
    lfWeightP: "",
    lfBattery: "",
    crossWeight: "",
    lrWeight: "",
    lrWeightP: "",
    lrBattery: "",
    rrWeight: "",
    rrWeightP: "",
    rrBattery: "",
    rearWeight: "",
    totalWeight: "",
  });
  const [selectedDevice, setSelectedDevice] = useState(null);
  const [isConnected, setIsConnected] = useState(false);
  const [unit, setUnit] = useState("kg");

  const checkConnectionStatus = async () => {
    if (selectedDevice) {
      const connected = await BleManager.isPeripheralConnected(
        selectedDevice.id
      );
      setIsConnected(connected);
    } else {
      setIsConnected(false);
    }
  };

  useEffect(() => {
    const interval = setInterval(checkConnectionStatus, 5000); // Check every 5 seconds
    return () => clearInterval(interval);
  }, [selectedDevice]);

  const sendChunkedData = async (data) => {
    const buffer = Buffer.from(data, "utf-8");

    for (let i = 0; i < buffer.length; i += CHUNK_SIZE) {
      const chunk = buffer.slice(i, i + CHUNK_SIZE);
      await BleManager.write(
        selectedDevice.id,
        serviceid,
        Zero,
        chunk.toJSON().data
      );
      await new Promise((resolve) => setTimeout(resolve, 100));
    }
  };

  const sendResponse = async (value) => {
    if (!selectedDevice || !isConnected) {
      console.error("No device selected or device not connected");
      return;
    }

    try {
      const response = JSON.stringify({ [value.toUpperCase()]: true });
      console.log(`Sending ${value} response: `, response);
      await sendChunkedData(response);
      console.log(`${value} response sent: `, response);

      setTimeout(async () => {
        try {
          const falseResponse = JSON.stringify({
            [value.toUpperCase()]: false,
          });
          console.log(`Sending false ${value} response: `, falseResponse);
          await sendChunkedData(falseResponse);
          console.log(`False ${value} response sent: `, falseResponse);
        } catch (error) {
          console.error(`Error sending false ${value} response: `, error);
        }
      }, 3000);
    } catch (error) {
      console.error(`Error sending ${value} response: `, error);
    }
  };

  const sendWiFiSwitchResponse = async (value) => {
    if (!selectedDevice || !isConnected) {
      console.error("No device selected or device not connected");
      return;
    }

    try {
      const response = JSON.stringify({ WiFiSwitch: value });
      console.log("Sending WiFiSwitch response: ", response);
      await sendChunkedData(response);
      console.log("WiFiSwitch response sent: ", response);

      // If WiFiSwitch is enabled, send false response after 3 seconds
      if (value) {
        setTimeout(async () => {
          try {
            const falseResponse = JSON.stringify({ WiFiSwitch: false });
            console.log("Sending false WiFiSwitch response: ", falseResponse);
            await sendChunkedData(falseResponse);
            console.log("False WiFiSwitch response sent: ", falseResponse);
          } catch (error) {
            console.error("Error sending false WiFiSwitch response: ", error);
          }
        }, 5000);
      }
    } catch (error) {
      console.error("Error sending WiFiSwitch response: ", error);
    }
  };

  const handleChangeUnit = async (value) => {
    setUnit(value);
    await sendResponse(value);
  };

  const handleZeroClick = async () => {
    await sendResponse("zero");
  };

  return (
    <BleContext.Provider
      value={{
        bleData,
        setBleData,
        selectedDevice,
        setSelectedDevice,
        isConnected,
        setIsConnected,
        unit,
        handleChangeUnit,
        handleZeroClick,
        sendWiFiSwitchResponse, // Provide the new function
      }}
    >
      {children}
    </BleContext.Provider>
  );
};









import React, { useState, useEffect, useContext, useRef } from "react";
import {
  StyleSheet,
  View,
  ScrollView,
  Text,
  PermissionsAndroid,
  TouchableOpacity,
  Platform,
  NativeEventEmitter,
  NativeModules,
} from "react-native";
import BleManager from "react-native-ble-manager";
import { Buffer } from "buffer";
import { useNavigation } from "@react-navigation/native";
import { IconButton, useTheme, MD3Colors } from "react-native-paper";
import { BleContext } from "./ContextApi/BleContext";
import _ from "lodash";
import AsyncStorage from "@react-native-async-storage/async-storage";

const serviceid = "12345678-1234-1234-1234-123456789012";
const node1 = "12348765-8765-4321-8765-123456789012";
const setupModeUUID = "87651234-4321-4321-4321-876543210987";

const BluetoothBLETerminal = () => {
  const [isDarkMode, setIsDarkMode] = useState(false);
  const navigation = useNavigation();
  const [devices, setDevices] = useState([]);
  const {
    setBleData,
    setSelectedDevice,
    selectedDevice,
    isConnected,
    setIsConnected,
  } = useContext(BleContext);
  const [paired, setPaired] = useState([]);
  const [isScanning, setIsScanning] = useState(false);
  const { colors } = useTheme();
  const readDataRef = useRef(null);

  const BleManagerModule = NativeModules.BleManager;
  const BleManagerEmitter = new NativeEventEmitter(BleManagerModule);

  const checkBluetoothEnabled = async () => {
    try {
      await BleManager.enableBluetooth();
      console.log("Bluetooth is turned on!");
    } catch (error) {
      console.error("BLE is not available on this device.");
    }
  };

  const startScan = () => {
    if (!isScanning) {
      setDevices([]);
      BleManager.scan([], 5, true)
        .then(() => {
          console.log("Scanning...");
          setIsScanning(true);
          // Stop scanning after 5 seconds
          setTimeout(() => {
            BleManager.stopScan()
              .then(() => {
                console.log("Scan stopped");
                setIsScanning(false);
              })
              .catch((error) => {
                console.error("Error stopping scan:", error);
              });
          }, 5000);
        })
        .catch((error) => {
          console.error(error);
        });
    }
  };

  const savePairedDevices = async (pairedDevices) => {
    try {
      await AsyncStorage.setItem(
        "pairedDevices",
        JSON.stringify(pairedDevices)
      );
    } catch (error) {
      console.error("Error saving paired devices:", error);
    }
  };

  const startDeviceDiscovery = async () => {
    try {
      const bondedPeripheralsArray = await BleManager.getBondedPeripherals();
      console.log("Bonded peripherals: " + bondedPeripheralsArray.length);

      // Filter out duplicate devices based on their IDs
      const uniquePairedDevices = bondedPeripheralsArray.filter(
        (device, index, self) =>
          index === self.findIndex((d) => d.id === device.id)
      );

      setPaired(uniquePairedDevices);
      savePairedDevices(uniquePairedDevices);
    } catch (error) {
      console.error(error);
    }
  };

  const loadPairedDevices = async () => {
    try {
      const pairedDevicesString = await AsyncStorage.getItem("pairedDevices");
      if (pairedDevicesString) {
        const pairedDevices = JSON.parse(pairedDevicesString);
        setPaired(pairedDevices);
      }
    } catch (error) {
      console.error("Error loading paired devices:", error);
    }
  };
  useEffect(() => {
    loadPairedDevices();
  }, []);

  const connectToDevice = async (device) => {
    try {
      await BleManager.connect(device.id);
      console.log("Connected to device:", device.id);
      setSelectedDevice(device);
      setIsConnected(true);

      // Check if the device is already in the paired list
      const isAlreadyPaired = paired.some(
        (pairedDevice) => pairedDevice.id === device.id
      );

      // if (!isAlreadyPaired) {
      //   // Add the device to the paired list
      //   setPaired((prevPaired) => {
      //     const updatedPaired = [...prevPaired, device];
      //     savePairedDevices(updatedPaired);
      //     return updatedPaired;
      //   });
      // }
      if (!isAlreadyPaired) {
        // Add the device to the paired list
        const updatedPaired = [...paired, device];
        setPaired(updatedPaired);
        savePairedDevices(updatedPaired); // Save updated paired devices
      }

      // Remove the device from the scan list
      setDevices((prevDevices) =>
        prevDevices.filter((d) => d.id !== device.id)
      );

      const deviceInfo = await BleManager.retrieveServices(device.id);
      console.log("Device info:", deviceInfo);

      // Check if the characteristic exists in the retrieved services
      const characteristicExists = deviceInfo.characteristics.some(
        (char) => char.characteristic === node1
      );

      if (characteristicExists) {
        await BleManager.startNotification(device.id, serviceid, node1);
      } else {
        throw new Error("Characteristic not found on the device");
      }
    } catch (error) {
      console.error("Error connecting to device:", error);
    }
  };

  const readData = async () => {
    while (true) {
      if (selectedDevice) {
        try {
          const readDataNode1 = await BleManager.read(
            selectedDevice.id,
            serviceid,
            node1
          );
          const readDataSetupMode = await BleManager.read(
            selectedDevice.id,
            serviceid,
            setupModeUUID
          );

          console.log("Raw data received from node1:", readDataNode1);
          console.log("Raw data received from setupMode:", readDataSetupMode);

          const messageNode1 = Buffer.from(readDataNode1).toString();
          const messageSetupMode = Buffer.from(readDataSetupMode).toString();
          console.log("Read node1: " + messageNode1);
          console.log("Read setupMode: " + messageSetupMode);

          let parsedData;
          let parsedSetupMode;
          try {
            parsedData = JSON.parse(messageNode1);
            parsedSetupMode = JSON.parse(messageSetupMode);
          } catch (parseError) {
            console.error("Error parsing data:", parseError);
            continue;
          }
          const data = {
            frontWeight: parsedData["front weight"],
            crossWeight: parsedData["cross weight"],
            rearWeight: parsedData["rear weight"],
            totalWeight: parsedData["total weight"],
            lfWeight: parsedData["lfWeight"],
            lfWeightP: parsedData["lfWeightP"],
            lfBattery: parsedData["lfBattery"],
            rfWeight: parsedData["rfWeight"],
            rfWeightP: parsedData["rfWeightP"],
            rfBattery: parsedData["rfBattery"],
            lrWeight: parsedData["lrWeight"],
            lrWeightP: parsedData["lrWeightP"],
            lrBattery: parsedData["lrBattery"],
            rrWeight: parsedData["rrWeight"],
            rrWeightP: parsedData["rrWeightP"],
            rrBattery: parsedData["rrBattery"],
            lfColor: parsedSetupMode["lfColor"],
            rfColor: parsedSetupMode["rfColor"],
            lrColor: parsedSetupMode["lrColor"],
            rrColor: parsedSetupMode["rrColor"],
          };

          setBleData(data);
        } catch (error) {
          console.error("Error reading message:", error);
          if (error.message.includes("Characteristic")) {
            console.error("Characteristic not found:", error.message);
          }
        }
      }
      await new Promise((resolve) => setTimeout(resolve, 100));
    }
  };

  useEffect(() => {
    readDataRef.current = _.debounce(readData, 500);
  }, [readData]);

  useEffect(() => {
    let intervalId;
    if (selectedDevice && isConnected) {
      intervalId = setInterval(() => {
        readDataRef.current();
      }, 2000);
    }
    return () => {
      if (intervalId) clearInterval(intervalId);
    };
  }, [isConnected, selectedDevice]);

  const disconnectFromDevice = async (device) => {
    try {
      await BleManager.disconnect(device.id);
      setSelectedDevice(null);
      setIsConnected(false);

      // Remove the device from the paired list
      setPaired((prevPaired) => prevPaired.filter((d) => d.id !== device.id));

      // Save the updated paired devices list
      savePairedDevices();

      console.log("Disconnected from device");
    } catch (error) {
      console.error("Error disconnecting:", error);
    }
  };

  useEffect(() => {
    checkBluetoothEnabled();

    if (Platform.OS === "android" && Platform.Version >= 23) {
      PermissionsAndroid.requestMultiple([
        PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN,
        PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT,
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
      ]).then((result) => {
        if (
          result["android.permission.BLUETOOTH_SCAN"] === "granted" &&
          result["android.permission.BLUETOOTH_CONNECT"] === "granted" &&
          result["android.permission.ACCESS_FINE_LOCATION"] === "granted"
        ) {
          console.log("User accepted");
        } else {
          console.log("User refused");
        }
      });
    }
    BleManager.start({ showAlert: false })
      .then(() => {
        console.log("BleManager initialized");
        startDeviceDiscovery();
      })
      .catch((error) => {
        console.error("Error initializing BleManager:", error);
      });
    return () => {
      BleManager.stopScan();
    };
  }, []);

  const handleDiscoverPeripheral = (peripheral) => {
    if (!peripheral.name || peripheral.name === "NO NAME") {
      return;
    }
    setDevices((prevDevices) => {
      if (!prevDevices.find((dev) => dev.id === peripheral.id)) {
        return [...prevDevices, peripheral];
      }
      return prevDevices;
    });
  };

  useEffect(() => {
    const handlerDiscover = BleManagerEmitter.addListener(
      "BleManagerDiscoverPeripheral",
      handleDiscoverPeripheral
    );

    return () => {
      handlerDiscover.remove();
    };
  }, []);

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode);
  };

  return (
    <View style={[styles.container, isDarkMode && styles.darkContainer]}>
      <View style={styles.container1}>
        <IconButton
          icon="arrow-left"
          size={24}
          onPress={() => navigation.navigate("Dashboard")}
          iconColor={isDarkMode ? MD3Colors.neutral100 : colors.text}
        />
        <IconButton
          icon="theme-light-dark"
          size={24}
          onPress={toggleDarkMode}
          iconColor={isDarkMode ? MD3Colors.neutral100 : colors.text}
        />
        <Text style={styles.heading1}>BLE Terminal</Text>
      </View>
      <ScrollView style={styles.scroll}>
        <Text style={[styles.heading, isDarkMode && { color: "white" }]}>
          Scan Devices
        </Text>
        {devices.map((device) => (
          <TouchableOpacity
            key={`devices-${device.id}`}
            style={styles.deviceContainer}
            onPress={() => connectToDevice(device)}
          >
            <Text style={styles.deviceName}>{device.name || device.id}</Text>
            <Text style={styles.deviceId}>{device.id}</Text>
          </TouchableOpacity>
        ))}
        <Text style={[styles.heading, isDarkMode && { color: "white" }]}>
          Paired Devices
        </Text>
        {paired.map((device) => (
          <TouchableOpacity
            key={`paired-${device.id}`}
            style={styles.deviceContainer}
            onPress={() => connectToDevice(device)}
            onLongPress={() => disconnectFromDevice(device)}
          >
            <Text style={styles.deviceName}>{device.name || device.id}</Text>
            <Text style={styles.deviceId}>{device.id}</Text>
          </TouchableOpacity>
        ))}
      </ScrollView>
      <TouchableOpacity
        style={styles.scanButton}
        onPress={startScan}
        disabled={isScanning}
      >
        <Text style={styles.scanButtonText}>
          {isScanning ? "Scanning..." : "Start Scan"}
        </Text>
      </TouchableOpacity>
      <TouchableOpacity
        style={styles.discoverButton}
        onPress={startDeviceDiscovery}
      >
        <Text style={styles.discoverButtonText}>Discover Paired Devices</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#f5f5f5",
  },
  darkContainer: {
    backgroundColor: "#1a1a1a",
  },
  scroll: {
    marginBottom: 20,
  },
  container1: {
    flexDirection: "row",
    alignItems: "center",
  },
  heading1: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 7,
    color: "#0082FC",
  },
  heading: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 7,
    color: "#333",
  },
  deviceContainer: {
    padding: 15,
    marginBottom: 10,
    borderRadius: 8,
    backgroundColor: "#fff",
    borderWidth: 1,
    borderColor: "#ddd",
  },
  deviceName: {
    fontSize: 16,
    fontWeight: "bold",
  },
  deviceId: {
    fontSize: 14,
    color: "#666",
  },
  scanButton: {
    padding: 15,
    borderRadius: 8,
    backgroundColor: "#0082FC",
    alignItems: "center",
    marginBottom: 10,
  },
  scanButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
  discoverButton: {
    padding: 15,
    borderRadius: 8,
    backgroundColor: "#0082FC",
    alignItems: "center",
    marginBottom: 10,
  },
  discoverButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default BluetoothBLETerminal;


import React, { useState, useEffect, useContext, useRef } from "react";
import {
  StyleSheet,
  View,
  ScrollView,
  Text,
  PermissionsAndroid,
  TouchableOpacity,
  Platform,
  NativeEventEmitter,
  NativeModules,
} from "react-native";
import BleManager from "react-native-ble-manager";
import { Buffer } from "buffer";
import { useNavigation } from "@react-navigation/native";
import { IconButton, useTheme, MD3Colors } from "react-native-paper";
import { BleContext } from "./ContextApi/BleContext";
import _ from "lodash";
import AsyncStorage from "@react-native-async-storage/async-storage";

const serviceid = "12345678-1234-1234-1234-123456789012";
const node1 = "12348765-8765-4321-8765-123456789012";
const setupModeUUID = "d8c8b40b-a3b8-46d4-8bae-8b41e3bf81fc";

const BluetoothBLETerminal = () => {
  const [isDarkMode, setIsDarkMode] = useState(false);
  const navigation = useNavigation();
  const [devices, setDevices] = useState([]);
  const {
    setBleData,
    setSelectedDevice,
    selectedDevice,
    isConnected,
    setIsConnected,
  } = useContext(BleContext);
  const [pairedDevices, setPairedDevices] = useState([]);

  const [isScanning, setIsScanning] = useState(false);
  const { colors } = useTheme();
  const readDataRef = useRef(null);

  const BleManagerModule = NativeModules.BleManager;
  const BleManagerEmitter = new NativeEventEmitter(BleManagerModule);

  const checkBluetoothEnabled = async () => {
    try {
      await BleManager.enableBluetooth();
      console.log("Bluetooth is turned on!");
    } catch (error) {
      console.error("BLE is not available on this device.");
    }
  };

  const startScan = () => {
    if (!isScanning) {
      setDevices([]);
      BleManager.scan([], 5, true)
        .then(() => {
          console.log("Scanning...");
          setIsScanning(true);
          // Stop scanning after 5 seconds
          setTimeout(() => {
            BleManager.stopScan()
              .then(() => {
                console.log("Scan stopped");
                setIsScanning(false);
              })
              .catch((error) => {
                console.error("Error stopping scan:", error);
              });
          }, 5000);
        })
        .catch((error) => {
          console.error(error);
        });
    }
  };

  const updatePairedDevices = (newPairedDevices) => {
    setPairedDevices(newPairedDevices);
    savePairedDevices(newPairedDevices);
  };

  const savePairedDevices = async (pairedDevices) => {
    try {
      await AsyncStorage.setItem(
        "pairedDevices",
        JSON.stringify(pairedDevices)
      );
    } catch (error) {
      console.error("Error saving paired devices:", error);
    }
  };
  const loadPairedDevices = async () => {
    try {
      const pairedDevicesString = await AsyncStorage.getItem("pairedDevices");
      if (pairedDevicesString) {
        const parsedPairedDevices = JSON.parse(pairedDevicesString);
        setPairedDevices(parsedPairedDevices);
      }
    } catch (error) {
      console.error("Error loading paired devices:", error);
    }
  };

  useEffect(() => {
    loadPairedDevices();
  }, []);

  const startDeviceDiscovery = async () => {
    try {
      const bondedPeripheralsArray = await BleManager.getBondedPeripherals();
      console.log("Bonded peripherals: " + bondedPeripheralsArray.length);

      // Filter out duplicate devices based on their IDs
      const uniquePairedDevices = bondedPeripheralsArray.filter(
        (device, index, self) =>
          index === self.findIndex((d) => d.id === device.id)
      );

      setPairedDevices(uniquePairedDevices);
      savePairedDevices(uniquePairedDevices);
    } catch (error) {
      console.error(error);
    }
  };

  const connectToDevice = async (device) => {
    try {
      await BleManager.connect(device.id);
      console.log("Connected to device:", device.id);
      setSelectedDevice(device);
      setIsConnected(true);

      // Check if the device is already in the paired list
      const isAlreadyPaired = pairedDevices.some((d) => d.id === device.id);

      if (!isAlreadyPaired) {
        // Add the device to the paired list
        const updatedPairedDevices = [...pairedDevices, device];
        updatePairedDevices(updatedPairedDevices);
      }

      // Remove the device from the scan list
      setDevices((prevDevices) =>
        prevDevices.filter((d) => d.id !== device.id)
      );

      const deviceInfo = await BleManager.retrieveServices(device.id);
      console.log("Device info:", deviceInfo);

      // Handle characteristic operations as needed
    } catch (error) {
      console.error("Error connecting to device:", error);
    }
  };

  const readData = async () => {
    while (true) {
      if (selectedDevice) {
        try {
          const readDataNode1 = await BleManager.read(
            selectedDevice.id,
            serviceid,
            node1
          );
          const readDataSetupMode = await BleManager.read(
            selectedDevice.id,
            serviceid,
            setupModeUUID
          );

          // console.log("Raw data received from node1:", readDataNode1);
          // console.log("Raw data received from setupMode:", readDataSetupMode);

          // Convert ArrayBuffer to strings using Buffer
          const messageNode1 = Buffer.from(readDataNode1).toString("utf-8");
          const messageSetupMode =
            Buffer.from(readDataSetupMode).toString("utf-8");

          console.log("Read node1:", messageNode1);
          console.log("Read setupMode:", messageSetupMode);

          let parsedData;
          let parsedSetupMode;
          try {
            parsedData = JSON.parse(messageNode1);
            parsedSetupMode = JSON.parse(messageSetupMode);
          } catch (parseError) {
            console.error("Error parsing data:", parseError);
            continue;
          }

          const data = {
            frontWeight: parsedData["front weight"],
            crossWeight: parsedData["cross weight"],
            rearWeight: parsedData["rear weight"],
            totalWeight: parsedData["total weight"],
            lfWeight: parsedData["lfWeight"],
            lfWeightP: parsedData["lfWeightP"],
            lfBattery: parsedData["lfBattery"],
            rfWeight: parsedData["rfWeight"],
            rfWeightP: parsedData["rfWeightP"],
            rfBattery: parsedData["rfBattery"],
            lrWeight: parsedData["lrWeight"],
            lrWeightP: parsedData["lrWeightP"],
            lrBattery: parsedData["lrBattery"],
            rrWeight: parsedData["rrWeight"],
            rrWeightP: parsedData["rrWeightP"],
            rrBattery: parsedData["rrBattery"],
            lfColor: parsedSetupMode["lfColor"],
            rfColor: parsedSetupMode["rfColor"],
            lrColor: parsedSetupMode["lrColor"],
            rrColor: parsedSetupMode["rrColor"],
          };

          setBleData(data);
        } catch (error) {
          console.error("Error reading message:", error);
          if (error.message.includes("Characteristic")) {
            console.error("Characteristic not found:", error.message);
          }
        }
      }
      await new Promise((resolve) => setTimeout(resolve, 1000));
    }
  };

  useEffect(() => {
    readDataRef.current = _.debounce(readData, 200);
  }, [readData]);

  useEffect(() => {
    let intervalId;
    if (selectedDevice && isConnected) {
      intervalId = setInterval(() => {
        readDataRef.current();
      }, 500);
    }
    return () => {
      if (intervalId) clearInterval(intervalId);
    };
  }, [isConnected, selectedDevice]);

  const disconnectFromDevice = async (device) => {
    try {
      await BleManager.disconnect(device.id);
      setSelectedDevice(null);
      setIsConnected(false);

      // Update pairedDevices state
      const updatedPairedDevices = pairedDevices.filter(
        (d) => d.id !== device.id
      );
      updatePairedDevices(updatedPairedDevices);

      console.log("Disconnected from device");
    } catch (error) {
      console.error("Error disconnecting:", error);
    }
  };

  useEffect(() => {
    checkBluetoothEnabled();

    if (Platform.OS === "android" && Platform.Version >= 23) {
      PermissionsAndroid.requestMultiple([
        PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN,
        PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT,
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
      ]).then((result) => {
        if (
          result["android.permission.BLUETOOTH_SCAN"] === "granted" &&
          result["android.permission.BLUETOOTH_CONNECT"] === "granted" &&
          result["android.permission.ACCESS_FINE_LOCATION"] === "granted"
        ) {
          console.log("User accepted");
        } else {
          console.log("User refused");
        }
      });
    }
    BleManager.start({ showAlert: false })
      .then(() => {
        console.log("BleManager initialized");
        startDeviceDiscovery();
      })
      .catch((error) => {
        console.error("Error initializing BleManager:", error);
      });
    return () => {
      BleManager.stopScan();
    };
  }, []);

  const handleDiscoverPeripheral = (peripheral) => {
    if (!peripheral.name || peripheral.name === "NO NAME") {
      return;
    }
    setDevices((prevDevices) => {
      if (!prevDevices.find((dev) => dev.id === peripheral.id)) {
        return [...prevDevices, peripheral];
      }
      return prevDevices;
    });
  };

  useEffect(() => {
    const handlerDiscover = BleManagerEmitter.addListener(
      "BleManagerDiscoverPeripheral",
      handleDiscoverPeripheral
    );

    return () => {
      handlerDiscover.remove();
    };
  }, []);

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode);
  };

  return (
    <View style={[styles.container, isDarkMode && styles.darkContainer]}>
      <View style={styles.container1}>
        <IconButton
          icon="arrow-left"
          size={24}
          onPress={() => navigation.navigate("Dashboard")}
          iconColor={isDarkMode ? MD3Colors.neutral100 : colors.text}
        />
        <IconButton
          icon="theme-light-dark"
          size={24}
          onPress={toggleDarkMode}
          iconColor={isDarkMode ? MD3Colors.neutral100 : colors.text}
        />
        <Text style={styles.heading1}>BLE Terminal</Text>
      </View>
      <ScrollView style={styles.scroll}>
        <Text style={[styles.heading, isDarkMode && { color: "white" }]}>
          Scan Devices
        </Text>
        {devices.map((device) => (
          <TouchableOpacity
            key={`devices-${device.id}`}
            style={styles.deviceContainer}
            onPress={() => connectToDevice(device)}
          >
            <Text style={styles.deviceName}>{device.name || device.id}</Text>
            <Text style={styles.deviceId}>{device.id}</Text>
          </TouchableOpacity>
        ))}
        <Text style={[styles.heading, isDarkMode && { color: "white" }]}>
          Paired Devices
        </Text>
        {pairedDevices.map((device) => (
          <TouchableOpacity
            key={`paired-${device.id}`}
            style={styles.deviceContainer}
            onPress={() => connectToDevice(device)}
            onLongPress={() => disconnectFromDevice(device)}
          >
            <Text style={styles.deviceName}>{device.name || device.id}</Text>
            <Text style={styles.deviceId}>{device.id}</Text>
          </TouchableOpacity>
        ))}
      </ScrollView>
      <TouchableOpacity
        style={styles.scanButton}
        onPress={startScan}
        disabled={isScanning}
      >
        <Text style={styles.scanButtonText}>
          {isScanning ? "Scanning..." : "Start Scan"}
        </Text>
      </TouchableOpacity>
      <TouchableOpacity
        style={styles.discoverButton}
        onPress={startDeviceDiscovery}
      >
        <Text style={styles.discoverButtonText}>Discover Paired Devices</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#f5f5f5",
  },
  darkContainer: {
    backgroundColor: "#1a1a1a",
  },
  scroll: {
    marginBottom: 20,
  },
  container1: {
    flexDirection: "row",
    alignItems: "center",
  },
  heading1: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 7,
    color: "#0082FC",
  },
  heading: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 7,
    color: "#333",
  },
  deviceContainer: {
    padding: 15,
    marginBottom: 10,
    borderRadius: 8,
    backgroundColor: "#fff",
    borderWidth: 1,
    borderColor: "#ddd",
  },
  deviceName: {
    fontSize: 16,
    fontWeight: "bold",
  },
  deviceId: {
    fontSize: 14,
    color: "#666",
  },
  scanButton: {
    padding: 15,
    borderRadius: 8,
    backgroundColor: "#0082FC",
    alignItems: "center",
    marginBottom: 10,
  },
  scanButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
  discoverButton: {
    padding: 15,
    borderRadius: 8,
    backgroundColor: "#0082FC",
    alignItems: "center",
    marginBottom: 10,
  },
  discoverButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default BluetoothBLETerminal;

import React, { useContext, useMemo, useState } from "react";
import {
  StyleSheet,
  Text,
  View,
  ImageBackground,
  StatusBar,
  Image,
  ScrollView,
  TouchableOpacity,
  Dimensions,
} from "react-native";
import { Appbar, RadioButton } from "react-native-paper";
import Icon from "react-native-vector-icons/MaterialIcons";
import BatteryIcon from "./BatteryIcon";
import BGImage from "./assets/background.png";
import Logo from "./assets/1.png";
import BT from "./assets/blues.png";
import { useNavigation } from "@react-navigation/native";
import { BleContext } from "./ContextApi/BleContext";

const { width, height } = Dimensions.get("window");

const Dashboard = () => {
  const [showLoginPopup, setShowLoginPopup] = useState(false);
  const navigation = useNavigation();
  const {
    bleData,
    handleChangeUnit,
    unit,
    handleZeroClick,
    selectedDevice,
    isConnected,
  } = useContext(BleContext);

  const formattedData = useMemo(() => {
    const formatWeight = (weight) => {
      return weight ? weight.toFixed(1) : "N/A";
    };

    return {
      frontWeight: formatWeight(bleData.frontWeight),
      crossWeight: formatWeight(bleData.crossWeight),
      rearWeight: formatWeight(bleData.rearWeight),
      totalWeight: formatWeight(bleData.totalWeight),
      lfWeight: formatWeight(bleData.lfWeight),
      rfWeight: formatWeight(bleData.rfWeight),
      lrWeight: formatWeight(bleData.lrWeight),
      rrWeight: formatWeight(bleData.rrWeight),
    };
  }, [bleData, unit]);

  const handleLogin = () => {
    setShowLoginPopup(true);
    navigation.navigate("LoginPopup");
  };

  const handleBluetooth = () => {
    navigation.navigate("BluetoothScreen");
  };

  const getBlockColor = (status) => {
    return status ? styles.greenBlock : styles.redBlock;
  };

  return (
    <View style={styles.container}>
      <StatusBar barStyle="light-content" />
      <ImageBackground source={BGImage} style={styles.backgroundImage}>
        <Appbar.Header style={styles.appBar}>
          <TouchableOpacity onPress={handleLogin} style={{ height: 40 }}>
            <Appbar.Action
              icon={() => <Icon name="menu" size={32} color="#fff" />}
            />
          </TouchableOpacity>
          <View style={styles.logoContainer}>
            <Image source={Logo} style={styles.logo} />
          </View>
        </Appbar.Header>
        <ScrollView style={styles.scroll}>
          <View style={styles.content}>
            <View style={styles.centerCard}>
              <Text style={styles.cardTitle}>Front Weight</Text>
              <View style={styles.card}>
                <Text style={styles.cardValue}>
                  {formattedData.frontWeight}
                </Text>
              </View>
            </View>
            <View style={styles.row}>
              <View style={styles.column}>
                <BatteryIcon
                  size={30}
                  batteryPercentage={bleData.lfBattery ?? "0"}
                />
                <Text style={styles.columnTitle}> LF</Text>
                <View
                  style={[styles.smallCard, getBlockColor(bleData.lfColor)]}
                >
                  <Text style={styles.columnValue}>
                    {formattedData.lfWeight}
                  </Text>
                  <Text style={styles.columnPercentage}>
                    {bleData.lfWeightP ?? "N/A"}%
                  </Text>
                </View>
              </View>
              <View style={styles.column}>
                <BatteryIcon
                  size={30}
                  batteryPercentage={bleData.rfBattery ?? "N/A"}
                />
                <Text style={styles.columnTitle}>RF</Text>
                <View
                  style={[styles.smallCard, getBlockColor(bleData.rfColor)]}
                >
                  <Text style={styles.columnValue}>
                    {formattedData.rfWeight}
                  </Text>
                  <Text style={styles.columnPercentage}>
                    {bleData.rfWeightP ?? "N/A"}%
                  </Text>
                </View>
              </View>
            </View>
            <View style={[styles.centerCard, { marginTop: 20 }]}>
              <Text style={styles.cardTitle}>Cross Weight</Text>
              <View style={styles.card}>
                <Text style={styles.cardValue}>
                  {formattedData.crossWeight}
                </Text>
              </View>
            </View>
            <View style={styles.row}>
              <View style={styles.column}>
                <BatteryIcon
                  size={30}
                  batteryPercentage={bleData.lrBattery ?? "N/A"}
                />
                <Text style={styles.columnTitle}>LR</Text>
                <View
                  style={[styles.smallCard, getBlockColor(bleData.lrColor)]}
                >
                  <Text style={styles.columnValue}>
                    {formattedData.lrWeight}
                  </Text>
                  <Text style={styles.columnPercentage}>
                    {bleData.lrWeightP ?? "N/A"}%
                  </Text>
                </View>
              </View>
              <View style={styles.column}>
                <BatteryIcon
                  size={30}
                  batteryPercentage={bleData.rrBattery ?? "N/A"}
                />
                <Text style={styles.columnTitle}>RR</Text>
                <View
                  style={[styles.smallCard, getBlockColor(bleData.rrColor)]}
                >
                  <Text style={styles.columnValue}>
                    {formattedData.rrWeight}
                  </Text>
                  <Text style={styles.columnPercentage}>
                    {bleData.rrWeightP ?? "N/A"}%
                  </Text>
                </View>
              </View>
            </View>
            <View style={[styles.centerCard, { marginTop: 20 }]}>
              <Text style={styles.cardTitle}>Rear Weight</Text>
              <View style={styles.card}>
                <Text style={styles.cardValue}>
                  {formattedData.rearWeight}
                </Text>
              </View>
            </View>
            <View style={styles.totalWeightContainer}>
              <View style={styles.centerCard}>
                <Text style={styles.cardTitle}>Total Weight</Text>
                <View style={styles.card}>
                  <Text style={styles.cardValue}>
                    {formattedData.totalWeight}
                  </Text>
                </View>
              </View>
              <View style={styles.radioContainer}>
                <RadioButton.Group
                  onValueChange={(value) => handleChangeUnit(value)}
                  value={unit}
                >
                  <View style={styles.radioOption}>
                    <RadioButton
                      value="kg"
                      color="#aaff00"
                      uncheckedColor="#F7FC03"
                    />
                    <Text style={styles.radioText}>Kg</Text>
                  </View>
                  <View style={styles.radioOption}>
                    <RadioButton
                      value="lbs"
                      color="#aaff00"
                      uncheckedColor="#F7FC03"
                    />
                    <Text style={styles.radioText}>Lbs</Text>
                  </View>
                </RadioButton.Group>
              </View>
            </View>
            <TouchableOpacity style={styles.button} onPress={handleZeroClick}>
              <View style={styles.centerCard}>
                <View style={styles.card1}>
                  <Text style={styles.cardValue1}>Zero</Text>
                </View>
              </View>
            </TouchableOpacity>
            <View style={styles.connectedContainer}>
              <TouchableOpacity
                onPress={handleBluetooth}
                style={styles.btImageContainer}
              >
                <Image source={BT} style={styles.btImage} />
              </TouchableOpacity>
              <View style={styles.connectionInfoContainer}>
                <Text
                  style={
                    selectedDevice ? styles.connected : styles.disconnected
                  }
                >
                  {selectedDevice ? selectedDevice.name : "-"}
                </Text>
                <Text
                  style={
                    selectedDevice ? styles.connected : styles.disconnected
                  }
                >
                  {isConnected ? "Connected" : "Disconnected"}
                </Text>
              </View>
            </View>
          </View>
        </ScrollView>
      </ImageBackground>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
  },
  backgroundImage: {
    flex: 1,
    resizeMode: "cover",
  },
  appBar: {
    backgroundColor: "transparent",
    elevation: 5,
    justifyContent: "center",
    alignItems: "center",
    marginBottom: 3,
  },
  logoContainer: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
    marginTop: height * 0.02,
    marginRight: width * 0.1,
  },
  logo: {
    width: "60%",
    height: undefined,
    aspectRatio: 3,
    resizeMode: "contain",
  },

  content: {
    flex: 1,
    alignItems: "center",
    marginTop: 40,
  },
  centerCard: {
    alignItems: "center",
    marginBottom: 20,
  },
  cardTitle: {
    marginBottom: 1,
    fontSize: width * 0.04,
    fontWeight: "bold",
    color: "#F7FC03",
  },
  card: {
    backgroundColor: "#aaff00",
    padding: 10,
    borderRadius: 20,
    alignItems: "center",
    width: width * 0.3,
    justifyContent: "center",
  },
  card1: {
    backgroundColor: "red",
    padding: 10,
    borderRadius: 20,
    alignItems: "center",
    width: width * 0.3,
    justifyContent: "center",
  },
  cardValue: {
    fontSize: width * 0.04,
    color: "#000",
  },
  cardValue1: {
    fontSize: width * 0.05,
    color: "#000",
  },
  row: {
    flexDirection: "row",
    justifyContent: "space-around",
    width: "100%",
  },
  column: {
    flexDirection: "column",
    alignItems: "flex-start",
    justifyContent: "flex-start",
  },
  columnTitle: {
    marginBottom: 1,
    fontSize: width * 0.04,
    fontWeight: "bold",
    color: "#F7FC03",
  },
  smallCard: {
    padding: 5,
    borderRadius: 10,
    alignItems: "center",
    width: width * 0.32,
    height: height * 0.07,

    justifyContent: "center",
  },
  greenBlock: {
    backgroundColor: "#00ff00",
  },
  redBlock: {
    backgroundColor: "#ff0000",
  },
  columnValue: {
    fontSize: 19,
    fontWeight: "bold",
    color: "#000",
  },
  columnPercentage: {
    fontSize: width * 0.04,
    color: "#000",
  },
  centerCard1: {
    alignItems: "center",
    marginBottom: 20,
    marginTop: 10,
  },
  centerCard3: {
    alignItems: "center",
    marginBottom: 20,
    marginTop: 1,
    marginLeft: width * 0.23,
  },
  card5: {
    backgroundColor: "#aaff00",
    padding: 10,
    borderRadius: 20,
    alignItems: "center",
    width: width * 0.3,
    height: height * 0.05,
    justifyContent: "center",
  },
  totalWeightContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
    marginBottom: 30,
    marginTop: 5,
    marginLeft: 105,
  },
  radioContainer: {
    flexDirection: "row",
    alignItems: "center",
  },
  radioOption: {
    flexDirection: "row",
    alignItems: "center",
    marginLeft: 40,
  },
  radioOption1: {
    flexDirection: "row",
    alignItems: "center",
    marginLeft: 40,
  },
  radioText: {
    fontSize: 16,
    color: "#fff",
    marginRight: 2,
  },
  radioButtonWrapper: {
    marginLeft: 0,
  },
  centerCard4: {
    alignItems: "center",
    marginBottom: 1,
    marginTop: 2,
  },
  card1: {
    backgroundColor: "red",
    padding: 3,
    borderRadius: 8,
    width: width * 0.3,
    alignItems: "center",
    height: height * 0.05,
  },
  cardValue1: {
    fontSize: width * 0.06,
    color: "#000",
    textAlign: "center",
  },
  button: {
    alignItems: "center",
    justifyContent: "center",
    marginTop: 10,
  },
  connectedContainer: {
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "flex-start",
    paddingHorizontal: "5%",
    paddingVertical: 10,
    width: "100%",
    marginTop: 5,
  },
  btImageContainer: {
    width: "20%",
    aspectRatio: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  btImage: {
    width: "80%",
    height: "80%",
    resizeMode: "contain",
  },
  connectionInfoContainer: {
    flex: 1,
    marginLeft: -8,
  },
  connected: {
    color: "#F7FC03",
    fontSize: 16,
    fontWeight: "bold",
  },
  disconnected: {
    color: "red",
    fontSize: 16,
    fontWeight: "bold",
  },
});
export default Dashboard;



import React, { useState, useEffect, useContext, useRef } from "react";
import {
  StyleSheet,
  View,
  ScrollView,
  Text,
  PermissionsAndroid,
  TouchableOpacity,
  Platform,
  NativeEventEmitter,
  NativeModules,
} from "react-native";
import BleManager from "react-native-ble-manager";
import { Buffer } from "buffer";
import { useNavigation } from "@react-navigation/native";
import { IconButton, useTheme, MD3Colors } from "react-native-paper";
import { BleContext } from "./ContextApi/BleContext";
import _ from "lodash";
import AsyncStorage from "@react-native-async-storage/async-storage";

const serviceid = "12345678-1234-1234-1234-123456789012";
const node1 = "12348765-8765-4321-8765-123456789012";
const node2 = "29d16b06-534f-41a1-85f7-260cf91a217f";
const node3 = "d8c8b40b-a3b8-46d4-8bae-8b41e3bf81fc";
const node4 = "87651234-4321-4321-4321-876543210987";
const frontWeight = "ca0279ab-3c2c-4efa-88ae-2863353339c9";
const setupModeUUID = "d8c8b40b-a3b8-46d4-8bae-8b41e3bf81fc";

const BluetoothBLETerminal = () => {
  const [isDarkMode, setIsDarkMode] = useState(false);
  const navigation = useNavigation();
  const [devices, setDevices] = useState([]);
  const {
    setBleData,
    setSelectedDevice,
    selectedDevice,
    isConnected,
    setIsConnected,
  } = useContext(BleContext);
  const [pairedDevices, setPairedDevices] = useState([]);

  const [isScanning, setIsScanning] = useState(false);
  const { colors } = useTheme();
  const readDataRef = useRef(null);

  const BleManagerModule = NativeModules.BleManager;
  const BleManagerEmitter = new NativeEventEmitter(BleManagerModule);

  const checkBluetoothEnabled = async () => {
    try {
      await BleManager.enableBluetooth();
      console.log("Bluetooth is turned on!");
    } catch (error) {
      console.error("BLE is not available on this device.");
    }
  };

  const startScan = () => {
    if (!isScanning) {
      setDevices([]);
      BleManager.scan([], 5, true)
        .then(() => {
          console.log("Scanning...");
          setIsScanning(true);
          // Stop scanning after 5 seconds
          setTimeout(() => {
            BleManager.stopScan()
              .then(() => {
                console.log("Scan stopped");
                setIsScanning(false);
              })
              .catch((error) => {
                console.error("Error stopping scan:", error);
              });
          }, 5000);
        })
        .catch((error) => {
          console.error(error);
        });
    }
  };

  const updatePairedDevices = (newPairedDevices) => {
    setPairedDevices(newPairedDevices);
    savePairedDevices(newPairedDevices);
  };

  const savePairedDevices = async (pairedDevices) => {
    try {
      await AsyncStorage.setItem(
        "pairedDevices",
        JSON.stringify(pairedDevices)
      );
    } catch (error) {
      console.error("Error saving paired devices:", error);
    }
  };

  const loadPairedDevices = async () => {
    try {
      const pairedDevicesString = await AsyncStorage.getItem("pairedDevices");
      if (pairedDevicesString) {
        const parsedPairedDevices = JSON.parse(pairedDevicesString);
        setPairedDevices(parsedPairedDevices);
      }
    } catch (error) {
      console.error("Error loading paired devices:", error);
    }
  };
  useEffect(() => {
    loadPairedDevices();
  }, []);

  const startDeviceDiscovery = async () => {
    try {
      const bondedPeripheralsArray = await BleManager.getBondedPeripherals();
      console.log("Bonded peripherals: " + bondedPeripheralsArray.length);

      // Filter out duplicate devices based on their IDs
      const uniquePairedDevices = bondedPeripheralsArray.filter(
        (device, index, self) =>
          index === self.findIndex((d) => d.id === device.id)
      );

      setPairedDevices(uniquePairedDevices);
      savePairedDevices(uniquePairedDevices);
    } catch (error) {
      console.error(error);
    }
  };

  const connectToDevice = async (device) => {
    try {
      await BleManager.connect(device.id);
      console.log("Connected to device:", device.id);
      setSelectedDevice(device);
      setIsConnected(true);

      // Check if the device is already in the paired list
      const isAlreadyPaired = pairedDevices.some((d) => d.id === device.id);

      if (!isAlreadyPaired) {
        // Add the device to the paired list
        const updatedPairedDevices = [...pairedDevices, device];
        setPairedDevices(updatedPairedDevices);
        savePairedDevices(updatedPairedDevices);
      }

      // Remove the device from the scan list
      setDevices((prevDevices) =>
        prevDevices.filter((d) => d.id !== device.id)
      );

      const deviceInfo = await BleManager.retrieveServices(device.id);
      console.log("Device info:", deviceInfo);

      // Handle characteristic operations as needed
    } catch (error) {
      console.error("Error connecting to device:", error);
    }
  };

  const readData = async () => {
    if (selectedDevice) {
      try {
        const [
          readDataNode1,
          readDataNode2,
          readDataNode3,
          readDataNode4,
          readfrontWeight,
        ] = await Promise.all([
          BleManager.read(selectedDevice.id, serviceid, node1),
          BleManager.read(selectedDevice.id, serviceid, node2),
          BleManager.read(selectedDevice.id, serviceid, node3),
          BleManager.read(selectedDevice.id, serviceid, node4),
          BleManager.read(selectedDevice.id, serviceid, frontWeight),
          BleManager.read(selectedDevice.id, serviceid, setupModeUUID),
        ]);

        const messageNode1 = Buffer.from(readDataNode1).toString("utf-8");
        const messageNode2 = Buffer.from(readDataNode2).toString("utf-8");
        const messageNode3 = Buffer.from(readDataNode3).toString("utf-8");
        const messageNode4 = Buffer.from(readDataNode4).toString("utf-8");
        const messageFrontWeight =
          Buffer.from(readfrontWeight).toString("utf-8");

        console.log("Read node1:", messageNode1);
        console.log("Read node2:", messageNode2);
        console.log("Read node3:", messageNode3);
        console.log("Read node4:", messageNode4);
        console.log("Read FrontWeight:", messageFrontWeight);

        const parsedData = JSON.parse(messageNode1);
        const parsedData1 = JSON.parse(messageNode2);
        const parsedData2 = JSON.parse(messageNode3);
        const parsedData3 = JSON.parse(messageNode4);
        const parsedFrontWeight = JSON.parse(messageFrontWeight);

        const data = {
          frontWeight: parsedFrontWeight["front weight"],
          crossWeight: parsedFrontWeight["cross weight"],
          rearWeight: parsedFrontWeight["rear weight"],
          totalWeight: parsedFrontWeight["total weight"],
          lfWeight: parsedData["lfWeight"],
          lfWeightP: parsedData["lfWeightP"],
          lfBattery: parsedData["lfBattery"],
          rfWeight: parsedData1["rfWeight"],
          rfWeightP: parsedData1["rfWeightP"],
          rfBattery: parsedData1["rfBattery"],
          lrWeight: parsedData2["lrWeight"],
          lrWeightP: parsedData2["lrWeightP"],
          lrBattery: parsedData2["lrBattery"],
          rrWeight: parsedData3["rrWeight"],
          rrWeightP: parsedData3["rrWeightP"],
          rrBattery: parsedData3["rrBattery"],
          lfColor: parsedData["lfColor"],
          rfColor: parsedData1["rfColor"],
          lrColor: parsedData2["lrColor"],
          rrColor: parsedData3["rrColor"],
        };

        setBleData(data);
      } catch (error) {
        console.error("Error reading message:", error);
      }
    }
  };
  useEffect(() => {
    readDataRef.current = _.debounce(readData, 200);
  }, [readData]);

  useEffect(() => {
    let intervalId;
    if (selectedDevice && isConnected) {
      const fetchData = async () => {
        await readData();
        intervalId = setTimeout(fetchData, 200);
      };
      fetchData();
    }
    return () => {
      if (intervalId) clearTimeout(intervalId);
    };
  }, [isConnected, selectedDevice]);

  // useEffect(() => {
  //   let intervalId;
  //   if (selectedDevice && isConnected) {
  //     intervalId = setInterval(() => {
  //       readDataRef.current();
  //     }, 500);
  //   }
  //   return () => {
  //     if (intervalId) clearInterval(intervalId);
  //   };
  // }, [isConnected, selectedDevice]);

  const disconnectFromDevice = async (device) => {
    try {
      await BleManager.disconnect(device.id);
      setSelectedDevice(null);
      setIsConnected(false);
      console.log("Disconnected from device");
    } catch (error) {
      console.error("Error disconnecting:", error);
    }
  };
  useEffect(() => {
    checkBluetoothEnabled();

    if (Platform.OS === "android" && Platform.Version >= 23) {
      PermissionsAndroid.requestMultiple([
        PermissionsAndroid.PERMISSIONS.BLUETOOTH_SCAN,
        PermissionsAndroid.PERMISSIONS.BLUETOOTH_CONNECT,
        PermissionsAndroid.PERMISSIONS.ACCESS_FINE_LOCATION,
      ]).then((result) => {
        if (
          result["android.permission.BLUETOOTH_SCAN"] === "granted" &&
          result["android.permission.BLUETOOTH_CONNECT"] === "granted" &&
          result["android.permission.ACCESS_FINE_LOCATION"] === "granted"
        ) {
          console.log("User accepted");
        } else {
          console.log("User refused");
        }
      });
    }
    BleManager.start({ showAlert: false })
      .then(() => {
        console.log("BleManager initialized");
        startDeviceDiscovery();
      })
      .catch((error) => {
        console.error("Error initializing BleManager:", error);
      });
    return () => {
      BleManager.stopScan();
    };
  }, []);

  const handleDiscoverPeripheral = (peripheral) => {
    if (!peripheral.name || peripheral.name === "NO NAME") {
      return;
    }
    setDevices((prevDevices) => {
      if (!prevDevices.find((dev) => dev.id === peripheral.id)) {
        return [...prevDevices, peripheral];
      }
      return prevDevices;
    });
  };

  useEffect(() => {
    const handlerDiscover = BleManagerEmitter.addListener(
      "BleManagerDiscoverPeripheral",
      handleDiscoverPeripheral
    );

    return () => {
      handlerDiscover.remove();
    };
  }, []);

  const toggleDarkMode = () => {
    setIsDarkMode(!isDarkMode);
  };

  return (
    <View style={[styles.container, isDarkMode && styles.darkContainer]}>
      <View style={styles.container1}>
        <IconButton
          icon="arrow-left"
          size={24}
          onPress={() => navigation.navigate("Dashboard")}
          iconColor={isDarkMode ? MD3Colors.neutral100 : colors.text}
        />
        <IconButton
          icon="theme-light-dark"
          size={24}
          onPress={toggleDarkMode}
          iconColor={isDarkMode ? MD3Colors.neutral100 : colors.text}
        />
        <Text style={styles.heading1}>BLE Terminal</Text>
      </View>
      <ScrollView style={styles.scroll}>
        <Text style={[styles.heading, isDarkMode && { color: "white" }]}>
          Scan Devices
        </Text>
        {devices.map((device) => (
          <TouchableOpacity
            key={`devices-${device.id}`}
            style={styles.deviceContainer}
            onPress={() => connectToDevice(device)}
          >
            <Text style={styles.deviceName}>{device.name || device.id}</Text>
            <Text style={styles.deviceId}>{device.id}</Text>
          </TouchableOpacity>
        ))}
        <Text style={[styles.heading, isDarkMode && { color: "white" }]}>
          Paired Devices
        </Text>
        {pairedDevices.map((device) => (
          <TouchableOpacity
            key={`paired-${device.id}`}
            style={styles.deviceContainer}
            onPress={() => connectToDevice(device)}
            onLongPress={() => disconnectFromDevice(device)}
          >
            <Text style={styles.deviceName}>{device.name || device.id}</Text>
            <Text style={styles.deviceId}>{device.id}</Text>
          </TouchableOpacity>
        ))}
      </ScrollView>
      <TouchableOpacity
        style={styles.scanButton}
        onPress={startScan}
        disabled={isScanning}
      >
        <Text style={styles.scanButtonText}>
          {isScanning ? "Scanning..." : "Start Scan"}
        </Text>
      </TouchableOpacity>
      <TouchableOpacity
        style={styles.discoverButton}
        onPress={startDeviceDiscovery}
      >
        <Text style={styles.discoverButtonText}>Discover Paired Devices</Text>
      </TouchableOpacity>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: "#f5f5f5",
  },
  darkContainer: {
    backgroundColor: "#1a1a1a",
  },
  scroll: {
    marginBottom: 20,
  },
  container1: {
    flexDirection: "row",
    alignItems: "center",
  },
  heading1: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 7,
    color: "#0082FC",
  },
  heading: {
    fontSize: 24,
    fontWeight: "bold",
    marginBottom: 7,
    color: "#333",
  },
  deviceContainer: {
    padding: 15,
    marginBottom: 10,
    borderRadius: 8,
    backgroundColor: "#fff",
    borderWidth: 1,
    borderColor: "#ddd",
  },
  deviceName: {
    fontSize: 16,
    fontWeight: "bold",
  },
  deviceId: {
    fontSize: 14,
    color: "#666",
  },
  scanButton: {
    padding: 15,
    borderRadius: 8,
    backgroundColor: "#0082FC",
    alignItems: "center",
    marginBottom: 10,
  },
  scanButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
  discoverButton: {
    padding: 15,
    borderRadius: 8,
    backgroundColor: "#0082FC",
    alignItems: "center",
    marginBottom: 10,
  },
  discoverButtonText: {
    color: "#fff",
    fontSize: 16,
    fontWeight: "bold",
  },
});

export default BluetoothBLETerminal;
